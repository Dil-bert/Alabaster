
DA2c_3_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000018a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ab  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026e  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001542  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>

unsigned short county;
	
int main(void){						//-----------------------------------------
	DDRB = (1<<2);		// SET B2 AS OUTPUT
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = (0<<2);		// SET B2 OUTPUT LOW
  94:	15 b8       	out	0x05, r1	; 5
	DDRC = (0<<3);		// SET C3 AS INPUT
  96:	17 b8       	out	0x07, r1	; 7
	PORTC = (1<<3);		// SET C3 PULL UP RESISTOR HIGH
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	88 b9       	out	0x08, r24	; 8
   	county = 0;			// GLOBAL COUNT VARIABLE = 0
  9c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

    while (1) 
    {
		if(!(PINC & (1 << 3))){		// If pinC.3 goes low
			PORTB = (1<<DDB2);		// Toggle PortB.2 (Turn on)
  a4:	54 e0       	ldi	r21, 0x04	; 4
			county = 0;				// Ensure Count variable is zero
		   	OCR0A = 0XFF;			// Set the compare register to 0xFF
  a6:	4f ef       	ldi	r20, 0xFF	; 255
   			TCCR0A = 0X02;			// Control RegisterA WGM01 = 1 (CTC mode)
  a8:	22 e0       	ldi	r18, 0x02	; 2
   			TCCR0B = 0X05;			// Control RegisterB CS02 and CS00 = 1 (1024 PRESCALER)
  aa:	35 e0       	ldi	r19, 0x05	; 5
   			TIMSK0 = (1<<OCIE0A);	// Set the Timer mask for compare interrupt flag
  ac:	ee e6       	ldi	r30, 0x6E	; 110
  ae:	f0 e0       	ldi	r31, 0x00	; 0
	PORTC = (1<<3);		// SET C3 PULL UP RESISTOR HIGH
   	county = 0;			// GLOBAL COUNT VARIABLE = 0

    while (1) 
    {
		if(!(PINC & (1 << 3))){		// If pinC.3 goes low
  b0:	33 99       	sbic	0x06, 3	; 6
  b2:	0a c0       	rjmp	.+20     	; 0xc8 <main+0x38>
			PORTB = (1<<DDB2);		// Toggle PortB.2 (Turn on)
  b4:	55 b9       	out	0x05, r21	; 5
			county = 0;				// Ensure Count variable is zero
  b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ba:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		   	OCR0A = 0XFF;			// Set the compare register to 0xFF
  be:	47 bd       	out	0x27, r20	; 39
   			TCCR0A = 0X02;			// Control RegisterA WGM01 = 1 (CTC mode)
  c0:	24 bd       	out	0x24, r18	; 36
   			TCCR0B = 0X05;			// Control RegisterB CS02 and CS00 = 1 (1024 PRESCALER)
  c2:	35 bd       	out	0x25, r19	; 37
   			TIMSK0 = (1<<OCIE0A);	// Set the Timer mask for compare interrupt flag
  c4:	20 83       	st	Z, r18
   			sei();
  c6:	78 94       	sei
		}
		if(county == 81){		// Run timer 81 times
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d0:	81 35       	cpi	r24, 0x51	; 81
  d2:	91 05       	cpc	r25, r1
  d4:	69 f7       	brne	.-38     	; 0xb0 <main+0x20>
			PORTB =(0<<DDB2);	// Toggle PortB.2 low (Turn off)
  d6:	15 b8       	out	0x05, r1	; 5
			county = 0;			// Set Counter to zero.
  d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  e0:	e7 cf       	rjmp	.-50     	; 0xb0 <main+0x20>

000000e2 <__vector_14>:
		}
    }
}

ISR (TIMER0_COMPA_vect){	// Timer compare flag interrupt service request 
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	county = county + 1;	// Increment the counter 1
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TIFR0 |= (1<<OCF0A);	// Toggle the compare flag
 102:	a9 9a       	sbi	0x15, 1	; 21
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
