
DA2c_2_a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ab  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000244  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>

unsigned short county;		// Global counter variable
int main(void)
{
	county = 0;				// Set count to zero
  90:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  94:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	DDRB = 1<<2;			// Set PortB.2 as an output
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	84 b9       	out	0x04, r24	; 4
	PORTB = 1<<2;			// Set PortB.2 high (Turn on LED)
  9c:	85 b9       	out	0x05, r24	; 5
	
	TCNT0 = 0X00;			// Clear the timer count register
  9e:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = (1<<TOIE0);	// Turn on the timer overflow interrupt 
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0A = 0X00;			// Set the Timer control register.A = 0x00 (Normal mode)
  a6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0X05;			// Set the Timer control register.B = 0x00 (Prescaler 1024)
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	85 bd       	out	0x25, r24	; 37
	sei();					// Global interrupts Enable
  ac:	78 94       	sei
	while(1){
		if(county == 15){	// If count equals 15 (40% of period)
			PORTB = 0<<2;	// Set PortB.2 Low (Turn off LED)
		}
		if(county == 38){	// If count equals 38 (end of period)
			PORTB = 1<<2;	// Set PortB.2 High (Turn on LED)
  ae:	24 e0       	ldi	r18, 0x04	; 4
	TIMSK0 = (1<<TOIE0);	// Turn on the timer overflow interrupt 
	TCCR0A = 0X00;			// Set the Timer control register.A = 0x00 (Normal mode)
	TCCR0B = 0X05;			// Set the Timer control register.B = 0x00 (Prescaler 1024)
	sei();					// Global interrupts Enable
	while(1){
		if(county == 15){	// If count equals 15 (40% of period)
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b8:	0f 97       	sbiw	r24, 0x0f	; 15
  ba:	09 f4       	brne	.+2      	; 0xbe <main+0x2e>
			PORTB = 0<<2;	// Set PortB.2 Low (Turn off LED)
  bc:	15 b8       	out	0x05, r1	; 5
		}
		if(county == 38){	// If count equals 38 (end of period)
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c6:	86 97       	sbiw	r24, 0x26	; 38
  c8:	99 f7       	brne	.-26     	; 0xb0 <main+0x20>
			PORTB = 1<<2;	// Set PortB.2 High (Turn on LED)
  ca:	25 b9       	out	0x05, r18	; 5
			county = 0;		// REset Counter to 0
  cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  d4:	ed cf       	rjmp	.-38     	; 0xb0 <main+0x20>

000000d6 <__vector_16>:
		}
	};
}

ISR (TIMER0_OVF_vect){		// Overflow Interrupt service request function
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	county = county + 1;	// Count increment Plus one
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TCNT0 = 00;				// Reset the timer count register to 0x00
  f6:	16 bc       	out	0x26, r1	; 38
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
