
DA2c_2_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ab  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025c  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/interrupt.h>

unsigned short county;		// Global Count Variable
int main(void)
{
	DDRB = 1<<2;			// Set PortB.2 as an output
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	84 b9       	out	0x04, r24	; 4
	PORTB = 0<<2;			// Set PortB.2 Low (LED off)
  94:	15 b8       	out	0x05, r1	; 5
	DDRC = 1<<3;			// Set PortC.3 as an input
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	87 b9       	out	0x07, r24	; 7
	PORTC = 1<<3;			// Set PortC.3 Pull up high
  9a:	88 b9       	out	0x08, r24	; 8

	county = 0;				// Set global count to 0
  9c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	TCNT0 = 0X00;			// Set the Timer count register to zero
  a4:	16 bc       	out	0x26, r1	; 38
	TIMSK0 = (1<<TOIE0);	// Set the Timer Overflow interrupt enabled
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	sei();					// Global interrupt enable
  ac:	78 94       	sei
			county = 0;			// Set global counter to 0
			PORTB = 0<<2;		// Set PortB.2 Low (LED off)
		}
		if(!(PINC & (1 << 3))){	// If PortC.3 Goes low (Button pressed)
			county = 0;			// Set global counter to 0
			PORTB = 1<<2;		// Set PortB.2 High (LED on)
  ae:	34 e0       	ldi	r19, 0x04	; 4
			TCCR0A = 0X00;		// Set Timer Control Register.A = 0x00 (Normal Mode)
			TCCR0B = 0X05;		// Set Timer Control Register.B = 0x05 (Prescaler 1024)
  b0:	25 e0       	ldi	r18, 0x05	; 5

	TCNT0 = 0X00;			// Set the Timer count register to zero
	TIMSK0 = (1<<TOIE0);	// Set the Timer Overflow interrupt enabled
	sei();					// Global interrupt enable
	while(1){
		if(county == 82){		// If Count = 82
  b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ba:	82 35       	cpi	r24, 0x52	; 82
  bc:	91 05       	cpc	r25, r1
  be:	29 f4       	brne	.+10     	; 0xca <main+0x3a>
			county = 0;			// Set global counter to 0
  c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = 0<<2;		// Set PortB.2 Low (LED off)
  c8:	15 b8       	out	0x05, r1	; 5
		}
		if(!(PINC & (1 << 3))){	// If PortC.3 Goes low (Button pressed)
  ca:	33 99       	sbic	0x06, 3	; 6
  cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0x22>
			county = 0;			// Set global counter to 0
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = 1<<2;		// Set PortB.2 High (LED on)
  d6:	35 b9       	out	0x05, r19	; 5
			TCCR0A = 0X00;		// Set Timer Control Register.A = 0x00 (Normal Mode)
  d8:	14 bc       	out	0x24, r1	; 36
			TCCR0B = 0X05;		// Set Timer Control Register.B = 0x05 (Prescaler 1024)
  da:	25 bd       	out	0x25, r18	; 37
  dc:	ea cf       	rjmp	.-44     	; 0xb2 <main+0x22>

000000de <__vector_16>:
		}
	};
}
ISR (TIMER0_OVF_vect){		// Timer Overflow interrupt Service Request 
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	county = county + 1;	// Increment Count + 1
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TCNT0 = 00;				// Reset the timer count register to zero
  fe:	16 bc       	out	0x26, r1	; 38
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
