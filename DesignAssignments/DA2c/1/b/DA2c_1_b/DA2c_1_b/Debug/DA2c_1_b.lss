
DA2c_1_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000697  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000609  00000000  00000000  0000083b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038d  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000034  00000000  00000000  00001429  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000145d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	unsigned short count = 0; // Counting variable
	
	DDRC |=(0<<DDC3);	// Set PortC.3 as an input
  80:	87 b1       	in	r24, 0x07	; 7
  82:	87 b9       	out	0x07, r24	; 7
	PORTC =(1<<DDC3);	// Set PortC.3 pull up High
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	88 b9       	out	0x08, r24	; 8
	DDRB |=(1<<DDB2);	// Set PortB.2 as an output
  88:	22 9a       	sbi	0x04, 2	; 4
	PORTB =(0<<DDB2);	// Set PortB.2 Low (LED off)
  8a:	15 b8       	out	0x05, r1	; 5
	
	TCCR0A = 0;			//Timer0, Normal mode, internal clk
  8c:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0X00;		//Setting the count register to 0[count goes from 0-255]
  8e:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= 0X05;		//Setting the Prescaler to 1024 and starting the timer
  90:	85 b5       	in	r24, 0x25	; 37
  92:	85 60       	ori	r24, 0x05	; 5
  94:	85 bd       	out	0x25, r24	; 37
    while (1) {
		if(!(PINC & (1 << 3))){					//If input PinC.3 == 0 
			PORTB ^=(1<<DDC2);					//Toggle PortB.2 (Turn on)
  96:	34 e0       	ldi	r19, 0x04	; 4
			while(count != 81){					//Run timer 81 times
				while((TIFR0 & 0X01) == 0){};	// run timer until overflow
				TCNT0 = 0X00;					//reset the timer count
				TIFR0 = 0X01;					//reset the tiemr over flow flag
  98:	21 e0       	ldi	r18, 0x01	; 1
	
	TCCR0A = 0;			//Timer0, Normal mode, internal clk
	TCNT0 = 0X00;		//Setting the count register to 0[count goes from 0-255]
	TCCR0B |= 0X05;		//Setting the Prescaler to 1024 and starting the timer
    while (1) {
		if(!(PINC & (1 << 3))){					//If input PinC.3 == 0 
  9a:	33 99       	sbic	0x06, 3	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x1a>
			PORTB ^=(1<<DDC2);					//Toggle PortB.2 (Turn on)
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	83 27       	eor	r24, r19
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	81 e5       	ldi	r24, 0x51	; 81
  a6:	90 e0       	ldi	r25, 0x00	; 0
			while(count != 81){					//Run timer 81 times
				while((TIFR0 & 0X01) == 0){};	// run timer until overflow
  a8:	a8 9b       	sbis	0x15, 0	; 21
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x28>
				TCNT0 = 0X00;					//reset the timer count
  ac:	16 bc       	out	0x26, r1	; 38
				TIFR0 = 0X01;					//reset the tiemr over flow flag
  ae:	25 bb       	out	0x15, r18	; 21
  b0:	01 97       	sbiw	r24, 0x01	; 1
	TCNT0 = 0X00;		//Setting the count register to 0[count goes from 0-255]
	TCCR0B |= 0X05;		//Setting the Prescaler to 1024 and starting the timer
    while (1) {
		if(!(PINC & (1 << 3))){					//If input PinC.3 == 0 
			PORTB ^=(1<<DDC2);					//Toggle PortB.2 (Turn on)
			while(count != 81){					//Run timer 81 times
  b2:	d1 f7       	brne	.-12     	; 0xa8 <main+0x28>
				while((TIFR0 & 0X01) == 0){};	// run timer until overflow
				TCNT0 = 0X00;					//reset the timer count
				TIFR0 = 0X01;					//reset the tiemr over flow flag
				count = count + 1;				//increment the count of timer overflows
				}
			PORTB ^=(1<<DDB2);					//Toggle PortB.2 (Turn off)
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	83 27       	eor	r24, r19
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	ef cf       	rjmp	.-34     	; 0x9a <main+0x1a>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
